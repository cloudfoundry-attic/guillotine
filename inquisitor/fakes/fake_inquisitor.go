// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"github.com/cloudfoundry-incubator/guillotine/inquisitor"
)

type FakeInquisitor struct {
	ReadCsvStub        func() ([][]string, error)
	readCsvMutex       sync.RWMutex
	readCsvArgsForCall []struct{}
	readCsvReturns struct {
		result1 [][]string
		result2 error
	}
	ConnectionArrayFromCsvStub        func(csvContent [][]string) []string
	connectionArrayFromCsvMutex       sync.RWMutex
	connectionArrayFromCsvArgsForCall []struct {
		csvContent [][]string
	}
	connectionArrayFromCsvReturns struct {
		result1 []string
	}
}

func (fake *FakeInquisitor) ReadCsv() ([][]string, error) {
	fake.readCsvMutex.Lock()
	defer fake.readCsvMutex.Unlock()
	fake.readCsvArgsForCall = append(fake.readCsvArgsForCall, struct{}{})
	if fake.ReadCsvStub != nil {
		return fake.ReadCsvStub()
	} else {
		return fake.readCsvReturns.result1, fake.readCsvReturns.result2
	}
}

func (fake *FakeInquisitor) ReadCsvCallCount() int {
	fake.readCsvMutex.RLock()
	defer fake.readCsvMutex.RUnlock()
	return len(fake.readCsvArgsForCall)
}

func (fake *FakeInquisitor) ReadCsvReturns(result1 [][]string, result2 error) {
	fake.ReadCsvStub = nil
	fake.readCsvReturns = struct {
		result1 [][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) ConnectionArrayFromCsv(csvContent [][]string) []string {
	fake.connectionArrayFromCsvMutex.Lock()
	defer fake.connectionArrayFromCsvMutex.Unlock()
	fake.connectionArrayFromCsvArgsForCall = append(fake.connectionArrayFromCsvArgsForCall, struct {
		csvContent [][]string
	}{csvContent})
	if fake.ConnectionArrayFromCsvStub != nil {
		return fake.ConnectionArrayFromCsvStub(csvContent)
	} else {
		return fake.connectionArrayFromCsvReturns.result1
	}
}

func (fake *FakeInquisitor) ConnectionArrayFromCsvCallCount() int {
	fake.connectionArrayFromCsvMutex.RLock()
	defer fake.connectionArrayFromCsvMutex.RUnlock()
	return len(fake.connectionArrayFromCsvArgsForCall)
}

func (fake *FakeInquisitor) ConnectionArrayFromCsvArgsForCall(i int) [][]string {
	fake.connectionArrayFromCsvMutex.RLock()
	defer fake.connectionArrayFromCsvMutex.RUnlock()
	return fake.connectionArrayFromCsvArgsForCall[i].csvContent
}

func (fake *FakeInquisitor) ConnectionArrayFromCsvReturns(result1 []string) {
	fake.ConnectionArrayFromCsvStub = nil
	fake.connectionArrayFromCsvReturns = struct {
		result1 []string
	}{result1}
}

var _ inquisitor.Inquisitor = new(FakeInquisitor)
